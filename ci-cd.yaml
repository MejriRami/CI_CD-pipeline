name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: your-org/your-app

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Lint Backend (Python)
        run: |
          python -m pip install flake8
          flake8 backend/

      - name: Lint Frontend (Static files)
        run: |
          echo "Linting frontend static files (dummy step)"
          # You can add real lint commands for JS/HTML if you want

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Backend Test Dependencies
        run: |
          python -m pip install pytest

      - name: Run Backend Tests
        run: pytest backend/

      - name: Run Frontend Tests (Dummy)
        run: |
          echo "Running frontend tests (dummy step)"
          # You could run real JS tests if you add npm setup

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:latest .

      - name: Push Docker Image
        run: |
          docker push $REGISTRY/$IMAGE_NAME:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull $REGISTRY/$IMAGE_NAME:latest
            docker stop your-container || true
            docker rm your-container || true
            docker run -d --name your-container -p 80:80 $REGISTRY/$IMAGE_NAME:latest

  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [deploy]
    if: ${{ always() }}
    steps:
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,message
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
